{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CradList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","OnSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","href","CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2cb5c2c7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CradList = ({ robots }) =>{\r\n\t//when we loop thruogh an array or list we need to remember to add the 'key' so react will know how to differentiate the different objects once you change something\r\n\t/*\r\n\tif(true){\r\n\t\tthrow new Error('NOOOOOOO!');\r\n\t}\r\n\t*/\r\n\treturn (\r\n\t\t<div>\r\n\t\t{ \t\r\n\t\t\trobots.map((user,i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card \r\n\t\t\t\t\t\tkey={user.id} \r\n\t\t\t\t\t\tid={user.id} \r\n\t\t\t\t\t\tname={user.name} \r\n\t\t\t\t\t\temail={user.email}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t}\r\n\t\t</div>\t\r\n\t);\r\n\r\n}\r\n\r\nexport default CradList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue' \r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='search robots'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflow:'scroll', height:'800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({hasError:true})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>Ooops, these was an issue</h1> \r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\n//import { robots } from './robots'; --> this is what we would use if we wanted to use a static file in our library\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport './App.css';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots : state.requestRobots.robots,\r\n\t\tisPending : state.requestRobots.isPending,\r\n\t\terror : state.requestRobots.error\r\n\t}\r\n}\r\n//dispatch is what triggers the actions\r\nconst mapDispatchToProps = (dispatch) =>{\r\n\treturn {\r\n\t\tOnSearchChange : (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots : () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\n/*const state = {\r\n\trobots : robots,\r\n\tsearchfield : ''\r\n}*/\r\n//state is what describes your app, says that robots and searchfield can change and affect our app.\r\n//It usually lives in the parent component (in our case 'App') \r\n\r\nclass App extends Component{\r\n\t/*The order of calls to the functions (its react built in do no need to call them) is :\r\n\tconstructor -> componentWillMount(we don't have it) -> render() -> componentDidMount()\r\n\tDue to the fact we have an update inside the componentDidMount() it will also run the Update methods flow\r\n\tSo it will run render() again\r\n\tIt was remoed due to redux */\r\n\t// constructor(){\r\n\t// \tsuper()\r\n\t// \tthis.state = {\r\n\t// \t\trobots : []\r\n\t// \t}\r\n\t// }\r\n\r\n\t//This is a function called once the component is mounted. \r\n\tcomponentDidMount(){\r\n\t\tthis.props.onRequestRobots();\r\n\t\t// fetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t// \t.then(response => response.json())\r\n\t\t// \t.then(users =>{this.setState({robots : users})});\r\n\t}\r\n\t\r\n\trender(){\r\n\t\tconst { searchField, OnSearchChange, robots, isPending } = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\t\treturn isPending ?\r\n\t\t<h1> Loading.....</h1> :\r\n\t\t(\r\n\t\t<div className='tc'>\r\n\t\t\t<h1 className='f2'>Robofriends</h1>\r\n\t\t\t<a href='https://www.google.co.il/maps/search/bar/'>maps</a>\r\n\t\t\t<SearchBox searchChange={OnSearchChange}/>\r\n\t\t\t<Scroll>\r\n\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t</ErrorBoundary>\r\n\t\t\t</Scroll>\r\n\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n//The connect is used to subscribe the App container to the redux store to get state changes from it\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_FAILED } from './constants.js';\r\n\r\n//The following function returns an object\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n\r\n//The following function returns a function (high hirarchy function), its called in a different way syntax from the APP dispatch, sent as a argument instead of being triggered from there.\r\n// thunk middleware is working with this type of functions only!\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({type : REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload : data}))\r\n\t\t\t.catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err}));\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_FAILED } from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField : '',\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD :\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\trobots : [],\r\n\tisPending : false,\r\n\terror : ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true });\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { robots : action.payload, isPending : false });\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, { error : action.payload, isPending : false });\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { searchRobots,requestRobots } from './reducers';\r\n\r\nimport 'tachyons';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({searchRobots,requestRobots});\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(<Provider store={store}>\r\n\t\t\t\t\t<App />\r\n\t\t\t\t</Provider> , document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}